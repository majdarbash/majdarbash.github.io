<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Random on My New Hugo Site</title>
    <link>https://majdarbash.github.io/categories/random/</link>
    <description>Recent content in Random on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Sep 2017 18:38:38 +0400</lastBuildDate>
    
	<atom:link href="https://majdarbash.github.io/categories/random/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to build Docker Image for NGINX using Chef (chef-solo)?</title>
      <link>https://majdarbash.github.io/2017/09/30/docker-building-nginx-cookbook-in-dockerized-container/</link>
      <pubDate>Sat, 30 Sep 2017 18:38:38 +0400</pubDate>
      
      <guid>https://majdarbash.github.io/2017/09/30/docker-building-nginx-cookbook-in-dockerized-container/</guid>
      <description>&lt;p&gt;</description>
    </item>
    
    <item>
      <title>How to provision Docker Images using Chef-Solo?</title>
      <link>https://majdarbash.github.io/2017/09/30/docker-provisioning-docker-container-with-chef-solo/</link>
      <pubDate>Sat, 30 Sep 2017 18:35:27 +0400</pubDate>
      
      <guid>https://majdarbash.github.io/2017/09/30/docker-provisioning-docker-container-with-chef-solo/</guid>
      <description>&lt;p&gt;</description>
    </item>
    
    <item>
      <title>How to upgrade Wordpress? Best and safest way to upgrade</title>
      <link>https://majdarbash.github.io/2017/08/19/best-safest-way-upgrade-wordpress-site/</link>
      <pubDate>Sat, 19 Aug 2017 13:49:34 +0400</pubDate>
      
      <guid>https://majdarbash.github.io/2017/08/19/best-safest-way-upgrade-wordpress-site/</guid>
      <description>&lt;p&gt;</description>
    </item>
    
    <item>
      <title>Overcoming SEO challenges with AngularJS 1-based Applications</title>
      <link>https://majdarbash.github.io/2017/06/27/angularjs-seo-implications/</link>
      <pubDate>Tue, 27 Jun 2017 22:49:42 +0400</pubDate>
      
      <guid>https://majdarbash.github.io/2017/06/27/angularjs-seo-implications/</guid>
      <description>Building a completely AngularJS based frontend can be really fun. Frontend developers enjoy having complete control of the routing, views, reusability of components and&amp;nbsp;testing the frontend as a stand-alone entity. At the same time, backend developers provide the frontend app with APIs and effectively invest the time into building reliable and cleaner API structures with having a clear separation of frontend and backend.
However a lot of SEO specialists are still arguing about the impact of SEO with AngularJS.</description>
    </item>
    
    <item>
      <title>CI Pipeline: Unifying and automating code using Coding Style Fixer</title>
      <link>https://majdarbash.github.io/2017/03/15/php-coding-style-fixer/</link>
      <pubDate>Wed, 15 Mar 2017 12:39:27 +0400</pubDate>
      
      <guid>https://majdarbash.github.io/2017/03/15/php-coding-style-fixer/</guid>
      <description>This tool will automatically fix your PHP code style. You can run it manually, or set it as pre-commit hook and it will run automatically.
Installation
{% raw %}composer require friendsofphp/php-cs-fixer {% endraw %} Usage:
Default configuration will apply PSR1 and PSR2 rules. To run the default configuration:
If you would like to apply specific rules, you can set the rules argument of these command.
{% raw %}--dry-run lets you run the fixer without making changes.</description>
    </item>
    
    <item>
      <title>How to test your SSL installation?</title>
      <link>https://majdarbash.github.io/2017/02/08/testing-installed-ssl-certificate/</link>
      <pubDate>Wed, 08 Feb 2017 00:41:19 +0400</pubDate>
      
      <guid>https://majdarbash.github.io/2017/02/08/testing-installed-ssl-certificate/</guid>
      <description>You can test the installed SSL certificate using this command:
openssl s_client -connect hostname:443 -showcerts | grep &#34;^ &#34;</description>
    </item>
    
    <item>
      <title>How to download the streaming m3u8 videos formats?</title>
      <link>https://majdarbash.github.io/2016/12/05/downloading-m3u8-videos/</link>
      <pubDate>Mon, 05 Dec 2016 00:12:32 +0400</pubDate>
      
      <guid>https://majdarbash.github.io/2016/12/05/downloading-m3u8-videos/</guid>
      <description>Ubuntu: sudo apt-get install ffmpeg ffmpeg -i http://.../playlist.m3u8 -c copy -bsf:a aac_adtstoasc output.mp4 Mac: brew install ffmpeg ffmpeg -i http://.../playlist.m3u8 -c copy -bsf:a aac_adtstoasc output.</description>
    </item>
    
    <item>
      <title>React Native: Building the &#34;Shoes&#34; App</title>
      <link>https://majdarbash.github.io/2016/10/20/react-native-the-shoe-app/</link>
      <pubDate>Thu, 20 Oct 2016 10:18:13 +0400</pubDate>
      
      <guid>https://majdarbash.github.io/2016/10/20/react-native-the-shoe-app/</guid>
      <description>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;I was recently experimenting building a react native app. After&amp;nbsp;digging a bit deeper into hybrid development, I have got attracted to the concept of producing a native code, in contrast to the web view approach in most of hybrid apps.&lt;/p&gt;
&lt;p&gt;So here&#39;s what we&#39;ve got. Setting it up:&lt;/p&gt;
&lt;p&gt;If you go to &lt;a href=&#34;https://facebook.github.io/react-native/docs/getting-started.html&#34;&gt;https://facebook.github.io/react-native/docs/getting-started.html&lt;/a&gt;&amp;nbsp;you&#39;ll get some instructions how to set it up.&lt;/p&gt;
&lt;h2&gt;Android installation&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;Install JDK&lt;/li&gt;
 &lt;li&gt;Install Android SDK&lt;/li&gt;
 &lt;li&gt;Adding android SDK path to the ~/.bashrc
  &lt;ul&gt;
   &lt;li&gt;export ANDROID_HOME=/usr/local/opt/android-sdk&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JDK can be installed using this link:&lt;br /&gt;
 http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html&lt;/p&gt;
&lt;p&gt;Android SDK can be installed using:&lt;br /&gt;
 brew install android-sdk&lt;/p&gt;
&lt;p&gt;After finishing these 3 steps, we would need to install some android packages.&lt;/p&gt;
&lt;p&gt;Open Android package manager:&lt;/p&gt;
&lt;pre&gt;android&lt;/pre&gt;
&lt;p&gt;These packages will be required to run the android simulator:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Android SDK Build-tools version 23.0.1&lt;/li&gt;
 &lt;li&gt;Android 6.0 (API 23)&lt;/li&gt;
 &lt;li&gt;Android Support Repository&lt;/li&gt;
 &lt;li&gt;Intel x86 Atom System Image (for Android 5.1.1 - API 22)&lt;/li&gt;
 &lt;li&gt;Intel x86 Emulator Accelerator (HAXM installer)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You would also require to download IntelHAXM.dmg file, which you can do from:&lt;/p&gt;
&lt;p&gt;https://software.intel.com/en-us/android/articles/intel-hardware-accelerated-execution-manager&lt;/p&gt;
&lt;p&gt;Run the installation file after download dmg.&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Install IntelHAXM.dmg
  &lt;ul&gt;
   &lt;li&gt;&lt;sdk&gt;/extras/intel/Hardware_Accelerated_Execution_Manager/IntelHAXM.dmg&lt;/li&gt;
   &lt;li&gt;&lt;sdk&gt; is&amp;nbsp;/usr/local/opt/android-sdk on OS X&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;To check that configuration is done correctly
  &lt;ul&gt;
   &lt;li&gt;kextstat | grep intel&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;You should see message
  &lt;ul&gt;
   &lt;li&gt;com.intel.kext.intelhaxm&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point we would like to create an android virtual device (AVD):&lt;/p&gt;
&lt;pre&gt;# launching avd manager
android avd
&lt;/pre&gt;
&lt;p&gt;Click &#34;Create&#34; and choose the following options for your AVD:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://majdarbash.github.io/wp-content/uploads/2016/09/Screen-Shot-2016-10-18-at-11.13.16-PM-e1476818078568.png&#34;&gt;&lt;img class=&#34;wp-image-418 size-large aligncenter&#34; src=&#34;https://majdarbash.github.io/wp-content/uploads/2016/09/Screen-Shot-2016-10-18-at-11.13.16-PM-1024x767.png&#34; alt=&#34;screen-shot-2016-10-18-at-11-13-16-pm&#34; width=&#34;648&#34; height=&#34;485&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now your AVD is created and you can start your emulator using:&lt;/p&gt;
&lt;pre&gt;emulator -avd &lt;avd name&gt;
# in our example: emulator -avd reactnative&lt;/pre&gt;
&lt;h2&gt;iOS installation&lt;/h2&gt;
&lt;p&gt;iOS emulator will be installed automatically as part of Xcode installation. You can install Xcode from the the app store and choose the particular emulator to start from within Xcode.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Before proceeding let&#39;s make sure that we have the following tools in place:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;brew&lt;/li&gt;
 &lt;li&gt;android&lt;/li&gt;
 &lt;li&gt;node&lt;/li&gt;
 &lt;li&gt;watchman (brew install watchman)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out the &lt;a href=&#34;https://majdarbash.github.io/digging-react-native/&#34;&gt;installation post&lt;/a&gt; for more information about&amp;nbsp;how to install these tools.&lt;/p&gt;
&lt;pre&gt;# install the react native cli
npm install -g react-native-cli&lt;/pre&gt;
&lt;p&gt;Run this script to create your first app (our app is called &#34;Shoes&#34;):&lt;/p&gt;
&lt;pre&gt;react-native init Shoes&lt;/pre&gt;
&lt;p&gt;At any point throughout this tutorial, you can run your app using these commands:&lt;/p&gt;
&lt;pre&gt;# run your app on iOS
react-native run-ios
&lt;h1 id=&#34;run-your-app-on-android&#34;&gt;run your app on Android&lt;/h1&gt;
&lt;p&gt;react-native run-android&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s time for fun now, let&#39;s start coding to build our beautiful shoe app !&lt;/p&gt;
&lt;h2&gt;The &#34;Shoes&#34; App&lt;/h2&gt;
&lt;p&gt;Everything is in place now, time to start the work!&lt;/p&gt;
&lt;p&gt;Let&#39;s navigate to the directory where we initialized the shoe app:&lt;/p&gt;
&lt;pre&gt;cd Shoes
&lt;h1 id=&#34;directory--listing&#34;&gt;directory  listing&lt;/h1&gt;
&lt;p&gt;ls -F&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://majdarbash.github.io/wp-content/uploads/2016/10/Screen-Shot-2016-10-19-at-10.13.29-PM.png&#34;&gt;&lt;img class=&#34;size-large wp-image-439 aligncenter&#34; src=&#34;https://majdarbash.github.io/wp-content/uploads/2016/10/Screen-Shot-2016-10-19-at-10.13.29-PM-1024x781.png&#34; alt=&#34;screen-shot-2016-10-19-at-10-13-29-pm&#34; width=&#34;648&#34; height=&#34;494&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We have got several files here. T0 give possibility to distinguish the code based on the version used, we have 2 entry scripts: index.ios.js and index.android.js which will be parsed and executed based on the corresponding app platform.&lt;/p&gt;
&lt;p&gt;</description>
    </item>
    
  </channel>
</rss>
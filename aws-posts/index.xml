<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS WhitePapers &amp; Deep Dives on My New Hugo Site</title>
    <link>https://majdarbash.github.io/aws-posts/</link>
    <description>Recent content in AWS WhitePapers &amp; Deep Dives on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://majdarbash.github.io/aws-posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Amazon Virtual Private Cloud Connectivity Options Whitepaper (2018)</title>
      <link>https://majdarbash.github.io/aws-posts/aws-vpc-connectivity-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/aws-vpc-connectivity-whitepaper/</guid>
      <description> Network-to-Amazon VPC Connectivity Options  AWS Managed VPN AWS Direct Connect AWS Direct Connect + VPN AWS VPN CloudHub Software VPN Transit VPC   Amazon VPC-to-Amazon VPC Connectivity Options  VPC Peering Software VPN Software-to-AWS Managed VPN AWS Managed VPN AWS Direct Connect AWS Private Link (VPC endpoint)   Internal User-to-Amazon VPC Connectivity Options  Software Remote-Access VPN    Network-to-Amazon VPC Connectivity Options AWS Managed VPN  AWS managed IPSec VPN connection over the internet Advantages  Reuse existing VPN equipment and processes Reuse existing internet connections AWS managed endpoint include multi-data center redundancy and automated failover Supports static routes and BGP peering and routing policies   Limitations  Network latency, variability and availability Customer managed endpoint for implementing redundancy and failover Customer device must support BGP if required     Redundant AWS managed VPN connections   AWS Direct Connect  Dedicated network connection over private lines Advantages  More predictable network performance, reduced bandwidth cost 1 or 10 Gbps provision connections Supports BGP peering and routing policies You can connect to VPCs in different regions using AWS Direct Connect Gateway   Disadvantages  May require additional telecom and hosting provide relationship or new network circuits to be provisioned     AWS Direct Connect Gateway   AWS Direct Connect + VPN  IPSec VPN connection over private lines Advantages  AWS Direct Connect features with the addition of secure IPSec VPN connection   Disadvantages  Additional VPN complexity added on top of AWS Direct Connect    AWS VPN CloudHub  Connect remote branch offices in hub-and-spoke model for primary or backup connectivity AWS VPN CloudHub leverages an Amazon VPC virtual private gateway with multiple gateways, each using unique BGP autonomous system numbers (ASNs) Advantages  Reuse existing internet connections and AWS VPN connections AWS managed virtual private gateway include multi-data center redundancy and automated failover Support BGP for exchanging routes and routing policies   Disadvantages  Network latency,variability and availability are dependent on the internet User managed branch office endpoints are responsible for implementing redundancy and failover     Software VPN  Software application-based VPN connection over the internet Advantages  Supports a wider array of VPN vendors, products, and protocols Fully customer-managed solution   Disadvantages  Customer is responsible for implementing HA solutions for all VPN endpoints     Software VPN   Transit VPC  Software appliance-based VPN connection with hub VPC Common strategy for connecting multiple, geographically disperse VPCs and remote networks in order to create a global network transit center AWS managed IPSec VPN connection for spoke VPC connection Advantages  Supports a wider array of VPN vendors, products, and protocols Fully customer-managed solution AWS managed VPN connection between hub and spoke VPCs   Disadvantages  Customer is responsible for implementing HA solutions for all VPN endpoints     Software VPN and Transit VPC   Amazon VPC-to-Amazon VPC Connectivity Options VPC Peering  AWS-provided network connectivity between two VPCs Advantages  Leverages AWS network infrastructure No single point of failure No bandwidth bottleneck   Disadvantages  VPC peering does nto support transitive peering relationships     VPC Peering   Software VPN  Software appliance-based VPN connections between VPCs Advantages  Leverages AWS networking equipment in-region adn internet pipes between regions Supports a wider array of VPN vendors, products and protocols Managed entirely by you   Disadvantages  You are responsible for implementing HA solutions for all VPN endpoints (if required) VPN instances could become a network bottleneck    Software-to-AWS Managed VPN  Software appliance to VPN connection between VPCs Advantages  Leverages AWS networking in-region and internet pipes between regions AWS managed endpoint includes multi-data center redundancy and automated failover   Disadvantages  You are responsible for implementing HA solutions for the software appliance VPN endpoints (if required) VPN instances could become a network bottleneck     Software to AWS Managed VPN   AWS Managed VPN  VPC-to-VPC routing managed by you over IPSec VPN connections using your equipment and the internet Advantages  Reuse existing Amazon VPC VPN connections AWS managed endpoint include multi-data center redundancy and automatic failover Supports static routes and dynamic BGP peering and routing policies   Disadvantages  Network latency, variability and availability depends on internet conditions The endpoint you manage is responsible for implementing redundancy and failover (if required)     VPC to VPC through AWS Managed VPN   AWS Direct Connect  VPC-to-VPC routing managed by you using your equipment in an AWS Direct Connect location and private lines Advantages  Consistent network performance Reduced bandwidth costs Supports static routes and BGP peering and routing policies   Disadvantages  May require additional telecom and hosting provide relationships     VPC to VPC through AWS Direct Connect   AWS Private Link (VPC endpoint)  AWS-provided network connectivity between two VPCs using interface endpoints Advantages  Leverages AWS networking infrastructure No single point of failure   Disadvantages  VPC endpoint services only available in AWS region in which they are created     AWS Private Link   Internal User-to-Amazon VPC Connectivity Options  Virtual extension of your data center into AWS Leverages existing end-user internal and remove access policies and technologies Requires existing end-user internal and remove access implementations  Software Remote-Access VPN  Cloud-based remote access solution to Amazon VPC and/or internal networks Advantages  Leverages low-cost, elastic, and secure web services provided by AWS for implementing a remote access solution   Disadvantages  Could be redundancy if internal and remote access implementations already exist     Remote Access VPN Solutions   </description>
    </item>
    
    <item>
      <title>An Overview of the AWS Cloud Adoption Framework (2017)</title>
      <link>https://majdarbash.github.io/aws-posts/overview-caf-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/overview-caf-whitepaper/</guid>
      <description>Six Perspective of AWS CAF Mapping the Journey to the Cloud AWS CAF Perspectives: Additional Detail  Business Perspective: Value Realization People Perspective: Roles and Readiness Governance Perspective: Prioritization and Control Platform Perspective: Applications and Infrastructure Security Perspective: Risk and Compliance Operations Perspective: Manage and Scale    Six Perspective of AWS CAF The perspective below describe the common roles and objectives to update staff skills and organizational processes.</description>
    </item>
    
    <item>
      <title>Automatic Elasticity Whitepaper (2018)</title>
      <link>https://majdarbash.github.io/aws-posts/automating-elasticity-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/automating-elasticity-whitepaper/</guid>
      <description>Types of Elasticity** Monitoring AWS Service Usage and Costs** Tagging Resources Automating Elasticity  Automating Time-Based Elasticity Automatic Volume-Based Elasticity    Types of Elasticity**  Time-based elasticity  Turning off resources when they are not being used   Volume-based elasticity  Matching scale to the intensity of demand, whether that&amp;rsquo;s compute cores, storage sizes, or throughput    Monitoring AWS Service Usage and Costs**  Cost Optimization Monitor  Detailed billing reports Break down by period, account, resource, or custom resource tags   Cost Explorer  View data up to the last 13 months Get recommendations on what Reserved Instances to purchase See trends that can help you understand your costs    Tagging Resources  Tagging resources helps get better visibility and control over cloud IT costs down  Automating Elasticity Automating Time-Based Elasticity  AWS Instance Scheduler  Start and stop schedules for your EC2 instances Deployed using an AWS CloudFormation template Specify the required parameter during the deployment Recurring AWS Lambda function will automatically start and stop appropriately tagged EC2 instances   Amazon EC2 API tools  Instances can be terminated programmatically using EC2 APIs Use StopInstances and TerminateInstances   AWS Lambda  Serverless functions can be used to shutdown instances that are not being used Trigger Lambda by Amazon CloudWatch Events   AWS Data Pipeline  Run AWS CLI commands on a set schedule   Amazon CloudWatch  Collect and track metrics and log files, set alarms and automatically react to changes in your AWS resources    Automatic Volume-Based Elasticity Auto-Scaling can be used for::</description>
    </item>
    
    <item>
      <title>AWS Best Practices for DDoS Resiliency (2019)</title>
      <link>https://majdarbash.github.io/aws-posts/best-practices-ddos-resiliency-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/best-practices-ddos-resiliency-whitepaper/</guid>
      <description>Denial of Service Attacks Infrastructure Layer Attacks Mitigation Techniques Monitoring Support  Protecting the business from the impact of Distributed Denial of Service attacks (DDoS):
 Maintaining availability and responsiveness of your application Avoid unnecessary cost of scaling infrastructure in response to an attack  Denial of Service Attacks DDoS attacks:
 Uses multiple sources, distributed groups of malware infected devices to orchestrate an attack against a target Hosts generate a flood of packets or requests to overwhelm the target DDoS are most common at layers 3,4,6 and 7 of the OSI model  Examples of attacks:</description>
    </item>
    
    <item>
      <title>AWS Cloud Transformation Maturity Model Whitepaper (2017)</title>
      <link>https://majdarbash.github.io/aws-posts/cloud-transformation-maturity-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/cloud-transformation-maturity-model/</guid>
      <description>Project Stage Foundation Stage Migration Stage Optimization Stage  AWS Cloud Transformation Maturity Model (CTMM):
 Tool used by enterprise customers to assess the maturity of their cloud adoption Realizing the vision of IT-as-a-Service (ITaaS) Whole organization has to transform and adopt the cloud   Project Stage Challenges and Barriers
 Limited knowledge and training  Raise level of AWS awareness via education and training   Executive support and funding  Seek case studies of proven ROI, participate in AWS executive briefings   Purchasing public cloud services  Educate procurement and legal staff about new purchasing paradigms Consider purchasing options  Direct purchase from AWS Indirect purchase from an AWS Partner     Limited confidence in cloud service models  Execute one or more pilot/POC projects Explore accelerator services, such as AWS Migration Jumpstart AWS POC is another venue to get funding for POC projects executed via eligible AWS Partners, check Partner Funding webpage   IT ownership and direction  Conduct a Kickoff and Discovery Workshop    Educational resources for roles in your organization</description>
    </item>
    
    <item>
      <title>AWS global network infrastructure (reInvent 2019)</title>
      <link>https://majdarbash.github.io/aws-posts/aws-global-network-reinvent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/aws-global-network-reinvent/</guid>
      <description>Network Aspects Nitro Network Architecture Building a scalable data center Availability Zones Transit Centers Physical Network Encryption AWS global network backbone Inside an Edge POP Summary  Network Aspects  Security Availability Scalability Performance Global Reach  Nitro Network Architecture  Nitro controller offloads in hardware lot of network features  ACL, Security Groups, VPC Peering, etc..   Gives consistent network performance VPC encryption - hardware accelerated encryption   Building a scalable data center  Networking building blocks  Make it easy to scale in right-sized segments Strong isolation boundaries Large amounts of network capacity   Networking technology  Routes  Single-chip routers  Constrained failure domain Fixed port types Many devices to manage Simpler forwarding architecture     Connectivity  Host Rack Networking  Partition placement groups  Ensures that all of instances in a partition group do not share any of underlying hardware with a resource in another partition group   Spread placement groups  Guarantee that each instance on the placement group is placed on distinct rack, with each rack having its own network and power source       Control plane  Using Single-chip-based platforms over large chassis-based platforms      Network Pattern</description>
    </item>
    
    <item>
      <title>AWS Migration Whitepaper (2018)</title>
      <link>https://majdarbash.github.io/aws-posts/aws-migration-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/aws-migration-whitepaper/</guid>
      <description>The Cloud Adoption Framework (AWS CAF) Organization Change Management Business Drivers Migration Strategies  Choosing the Right Migration Strategy   Building a Business case for Migration People and Organization  Creating a Cloud Center of Excellence (CCoE)   Migration Readiness and Planning (MRP)  Assessing Migration Readiness Application Discovery Application Portfolio Analysis Migration Planning Technical Planning The Virtual Private Cloud Environment   Migrating  First Migrations - Build Experience Application Migration Process Team Models    The Cloud Adoption Framework (AWS CAF) The business plan should consider and incorporate the following areas:</description>
    </item>
    
    <item>
      <title>AWS Multiple Account Security Strategy</title>
      <link>https://majdarbash.github.io/aws-posts/aws-multiple-account-security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/aws-multiple-account-security/</guid>
      <description>General Best Practices  Clearly define an AWS account-creation process  Who is creating an account? What is the account used for?   Define a company-wide AWS usage policy  Should include minimal security baseline requirements for the different ways they will use AWS Which services are approved for use What security or encryption features must be enabled   Create a security account structure for managing multiple accounts  Centralize security monitoring and management Manage identity and access Provide audit and compliance monitoring services   Leverage AWS APIs and scripts  Consistently apply baseline configurations across multiple AWS accounts Compliance-monitoring scripts    Implementation Considerations When to Create Multiple Accounts Multiple accounts provide highest level of security and resource isolation in AWS.</description>
    </item>
    
    <item>
      <title>AWS Security Best Practices</title>
      <link>https://majdarbash.github.io/aws-posts/aws-security-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/aws-security-best-practices/</guid>
      <description>AWS Shared Responsibility Model  Infrastructure services Container services Abstracted services   AWS Trusted Advisor Define and categorize assets on AWS Design your ISMS to protect your assets on AWS Manage AWS Accounts, IAM Users, Groups, and Roles  Strategies for Using Multiple AWS Accounts Managing AWS Credentials Delegation Using IAM Roles and Temporary Security Credentials   Managing OS-level Access to Amazon EC2 Instances Secure Your Data  Resource Access Authorization Storing and Managing Encryption Keys in the Cloud Protecting Data at Rest Decommission Data and Media Securely Protect Data in Transit   Secure Your Operating Systems and Applications  Creating Custom AMIs Using Additional Application Security Practices   Secure Your Infrastructure  Using Secure Zoning and Network Segmentation Strengthening Network Security Securing Periphery Systems: User Repositories, DNS, NTP Building Threat Protection Layers Test Security Managing Metrics and Improvements Mitigating and Protecting Against DoS &amp;amp; DDoS Attacks   Manage Security Monitoring, Alerting, Audit Trail and Incident Response  Using Change Management Logs Protecting Log Information    AWS Shared Responsibility Model  IAM Service  Centrally manage users, security credentials such as passwords, access keys, and permission policies that control which AWS services and resources users can access   Regions, AZs and Endpoints  Network latency and regulatory compliance   Facilities Physical security of hardware Network infrastructure Virtualization infrastructure  Infrastructure services  EC2, EBS, ASG, VPC Services for building a cloud infrastructure similar to on-premise You control the operating system You configure and operate any identity management system that provides access to the user layer of the virtualization stack  AWS Manages:</description>
    </item>
    
    <item>
      <title>Backup and Recovery Approaches using AWS Whitepaper (2016)</title>
      <link>https://majdarbash.github.io/aws-posts/backup-and-recovery-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/backup-and-recovery-whitepaper/</guid>
      <description>AWS Storage Services for Data Protection Designing a Backup and Recovery Solution Cloud-Native Infrastructure On-Premises to AWS Infrastructure Hybrid Environments Securing Backup Data in AWS  AWS Storage Services for Data Protection  Amazon S3  Single object limit of 5 TB Range of storage classes: standard, standard IA, glacier   Amazon Glacier  Extremely low-cost, cloud archive service Secure and durable storage for archiving and online backup Infrequently accessed data, retrieval times of several hours   AWS Storage Gateway  Connects on-premises software appliance with cloud-based storage   AWS Transfer Services  AWS Direct Connect, AWS Snowball, AWS Storage Gateway, Amazon S3 Transfer Acceleration to quickly transfer your data    Designing a Backup and Recovery Solution  Backup process should meet the RTO and RPO of the business, including:  File-level recovery Volume-level recovery Application-level recovery (e.</description>
    </item>
    
    <item>
      <title>Best Practices for Managing Security Operations on AWS (re:Invent 2017)</title>
      <link>https://majdarbash.github.io/aws-posts/best-practices-security-operations-reinvent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/best-practices-security-operations-reinvent/</guid>
      <description>Boundaries Consistent Controls Test often, fail early Closed-Loop Mechanisms Full Stack Practice Visibility  Netflix Usecase    Boundaries  In-VPC boundaries  SGs, NACLs AWS IAM Resource level constraints   VPC as the boundary (single account)  Equivalent to separate networks Peering, routing   AWS account as the boundary  Highest degree of segregation  By data classification Business unit Workload Functional      Considerations:</description>
    </item>
    
    <item>
      <title>Deep Dive on Amazon Relational Database Service (reInvent 2017)</title>
      <link>https://majdarbash.github.io/aws-posts/deep-dive-on-aws-rds-reinvent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/deep-dive-on-aws-rds-reinvent/</guid>
      <description>Why use Amazon RDS? Which instance type should I choose? Which storage type should I choose? How do I decide between GP2 and IO1? How do I scale my database instance? What happens during a Multi-AZ failover? Why would I use Read Replicas? How does Amazon RDS manage backups? When should I use Multi-AZ as opposed to Read Replicas? How do I secure my Amazon RDS database? How do I monitor my Amazon RDS database?</description>
    </item>
    
    <item>
      <title>Deep Dive on Amazon S3 &amp; Amazon Glacier Storage Management (reInvent 2017)</title>
      <link>https://majdarbash.github.io/aws-posts/deep-dive-on-aws-s3-reinvent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/deep-dive-on-aws-s3-reinvent/</guid>
      <description>Storage Management on S3  User Permission Management By Tagging S3 Inventory Storage Class Analysis Object-Level Logging Cross-Region Replication (CRR) Automate with Trigger-Based Workflow Amazon S3 event notifications Default Encryption Amazon Macie   AlertLogic Use Case on AWS S3  S3 Object Management Tags with Lifecycle Expiration Policies Tags with Lifecycle Transition Policies Demonstrate Scale of Storage Solution (AWS re:Invent 2017)    Storage Management on S3  Organize  Object Tagging   Monitor and Analyze  S3 Inventory Amazon CloudWatch Storage Class Analysis AWS CloudTrail   Act  Cross Region replications Event Notification Lifecycle Policy   Security Management  AWS KMS AWS IAM Bucket Permissions Check Encryption Status in S3 Inventory Default Encryption Trusted advisor Amazon Macie    User Permission Management By Tagging { &amp;#34;version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Action&amp;#34;: [ &amp;#34;s3:GetObject&amp;#34; ], &amp;#34;Resource&amp;#34;: &amp;#34;arn:aws:s3:::Project-bucket/*&amp;#34;, &amp;#34;Condition&amp;#34;: {&amp;#34;StringEquals&amp;#34;: {&amp;#34;s3:RequestObjectTag/Project&amp;#34;: &amp;#34;x&amp;#34;}} } ] } S3 Inventory  Generates a CSV / ORC file based of all objects in S3 bucket with respect to filter criteria.</description>
    </item>
    
    <item>
      <title>Getting Started with Amazon Aurora Whitepaper (2016)</title>
      <link>https://majdarbash.github.io/aws-posts/getting-started-with-amazon-aurora-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/getting-started-with-amazon-aurora-whitepaper/</guid>
      <description>Amazon Aurora Amazon Aurora Architecture Monitoring Migrating to Amazon Aurora  Amazon Aurora  Fully managed, cloud-native database service Scalability, reliability, performance Cost-effective Highly durable  Database volumes are divided into 10GB segments Each segment is replicated six ways across 3 AZs   Fault-tolerant  Transparently handles loss of 2 out of 6 copies without losing write availability or three out of six copies without losing read availability   Self-healing  Automatically replaces or repairs failed disks and nodes   Storage autoscaling  Volume grows in increments of 10GB up to a maximum of 64TB   Continuous backup  No impact on performance, 99.</description>
    </item>
    
    <item>
      <title>IAM Policy Master on AWS (re:Invent 2018)</title>
      <link>https://majdarbash.github.io/aws-posts/iam-policies-on-aws-reinvent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/iam-policies-on-aws-reinvent/</guid>
      <description>Policy Types and use cases Policy resolution within an account Policy resolution across accounts Example use cases  1. Set permission guardrails across accounts 2. Control creation of resources to regions 3. Enable developers to create roles safely 4. Use tags to scale permission management 5. Utilize PrincipalTags in IAM policies    Policy Types and use cases  AWS Organizations  Use: Guardrails to disable service access on the principals of the account Service control policies (SCP)   AWS Identity and Access Management  Use: Grant granular permissions on IAM principals (users and roles) and control the maximum permissions they can set Permission policies Permission boundaries  Scale and delegate permissions management to developers safely Control the maximum permissions employees can grant     AWS Security Token Service (STS)  Use: Reduce general shared permissions further Scoped-down policies   Specific AWS Resources  Use: Cross-account access and to control access from the resource Resource-based policies   VPC Endpoints  Use: Controls access to the service with a VPC endpoint Endpoint policies    Policy resolution within an account Final Policy = [SCP] AND ([IAM Policies] OR [Resource-based Policies]) where: [IAM Policies] = ?</description>
    </item>
    
    <item>
      <title>Implementing Microservices on AWS (2019)</title>
      <link>https://majdarbash.github.io/aws-posts/microservices-on-aws-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/microservices-on-aws-whitepaper/</guid>
      <description>Simple Microservices Architecture on AWS Reducing Operational Complexity Distributed Systems Components  Service Discovery Distributed Data Management Asynchronous Communication and Lightweight Messaging Distributed Monitoring    Microservices are a combination of various successful and proven concepts such as:
 Agile software development Service-oriented architectures API-first design Continuous Integration/Continuous Delivery (CI/CD)  Serverless operational model tenets:
 No infrastructure to provision or manage Automatically scaling by unit of consumption &amp;ldquo;Pay for value&amp;rdquo; billing model Built-in availability and fault tolerance  Simple Microservices Architecture on AWS User Interface</description>
    </item>
    
    <item>
      <title>Infrastructure as Code Whitepaper (2017)</title>
      <link>https://majdarbash.github.io/aws-posts/infrastructure-as-a-code-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/infrastructure-as-a-code-whitepaper/</guid>
      <description>Infrastructure Resource Lifecycle Resource Provisioning Configuration Management  Amazon EC2 Systems Manager AWS OpsWorks for Chef Automate   Monitoring and Performance Governance and Compliance Resource Optimization Key Actions to Implement IaaC  Infrastructure Resource Lifecycle IaaC Features:
 Both administrator and developers can instantiate infrastructure using configuration files Code can be used to produce compute, storage, network and application services Eliminates configuration drift through automation Increases the speed and agility of infrastructure deployments  Lifecycle:</description>
    </item>
    
    <item>
      <title>Integrating AWS with Multiprotocol Label Switching Whitepaper (2016)</title>
      <link>https://majdarbash.github.io/aws-posts/mutlprotocol-label-switching-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/mutlprotocol-label-switching-whitepaper/</guid>
      <description>MPLS and Managed MPLS Services AWS Networking Services and Core Technologies BGP Protocol Overview AWS APN Partners - Direct Connect as a Service Colocation with AWS Direct Connect  MPLS and Managed MPLS Services MLPS:
 MPLS predetermines the routing path and uses a label swapping push, pop, and swap method to direct the traffic to its destination CAn be provisioned as Layer 3 (IP-based) or Layer 2 (single broadcast domain) Provides a logical extension of a customer’s network  Business reasons for integration MPLS into your existing infrastructure:</description>
    </item>
    
    <item>
      <title>Introduction to AWS Economics (2015)</title>
      <link>https://majdarbash.github.io/aws-posts/introduction-to-aws-economics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/introduction-to-aws-economics/</guid>
      <description>Reducing Costs and Complexity  Advantages of Cloud Technology AWS Economics    Reducing Costs and Complexity Investments Considered:
 Capital expenditures Operational expenditures Staffing Opportunity costs Licensing Facilities overhead  Expansion of Data Center or colocation footprint:
 Capacity planning  Servers, hardware maintenance, pricing   Utilization  Average utilization rate Provisioning for peak load   Operations  Facilities, international expansion, utilities (electricity, cooling), and budgetting for peak time   Optimization  Automatic scaling, capacity reservation, quick infrastructure expansion costs    Advantages of Cloud Technology  Decrease your TCO Reduce complexity Adjust capacity on the fly Reduce time to market Deploy quickly, event worldwide Increase efficiencies Innovate more Spend your resource strategically Enhanced security  AWS Economics Benefits to the AWS users:</description>
    </item>
    
    <item>
      <title>Introduction to Scalable Gaming Patterns on AWS (2017)</title>
      <link>https://majdarbash.github.io/aws-posts/scalable-gaming-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/scalable-gaming-patterns/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Maximizing Value with AWS Whitepaper (2017)</title>
      <link>https://majdarbash.github.io/aws-posts/maximizing-value-with-aws-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/maximizing-value-with-aws-whitepaper/</guid>
      <description>Achieve Total Cost of Operation Benefits Using Cloud Computing  Create a Culture of Cost Management Driving Cost of Operation Employ Best Practices    Achieve Total Cost of Operation Benefits Using Cloud Computing Create a Culture of Cost Management  Use tools like AWS Trusted Advisor and AWS Billing Explorer  Put data in the hands of everyone  Reduces feedback loop between information/data and the action to correct usage and sizing issues   Enact policies and evangelize  Best practices to drive operational excellence   Spend time training  Educate staff on the items affecting the cost and steps to eliminate waste   Create incentives for good behavior  Encourage cost effectiveness throughout the organization      Driving Cost of Operation Funding Models</description>
    </item>
    
    <item>
      <title>Migrating Applications Running Relational Databases to AWS: Best Practices Guide (2019)</title>
      <link>https://majdarbash.github.io/aws-posts/migrating-applications-to-aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/migrating-applications-to-aws/</guid>
      <description>Migration Steps and Tools  Development Environment Setup Prerequisites Step 1: Migration Assessment Step 2: Schema Conversion Step 3: Conversion of Embedded SQL and Application Code Step 4: Data Migration Step 5: Testing Converted Code Step 6: Data Replication Step 7: Deployment to AWS and Go Live   Best Practices  Migration Steps and Tools  Migration assessment analysis Schema conversion to target database platform SQL statement and application code conversion Data migration Testing of converted database and application code Setting up replication and failover scenarios for data migration to the target platform Setting up monitoring for a new production environment and go live with the target environment  Tools to automate migration steps:</description>
    </item>
    
    <item>
      <title>Multi-Tenant SaaS Storage Strategies</title>
      <link>https://majdarbash.github.io/aws-posts/multi-tenant-saas-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/multi-tenant-saas-storage/</guid>
      <description>SaaS Paritioning Models  Silo Model Pool Model Bridge Model   Migration and Multitenancy Security Considerations Management and Monitoring Tiered Storage Models Developer Experience Linked Account Silo Model Multitenancy on DynamoDB  Silo Model Bridge Model Pool Model   Mutlitenancy on RDS  Silo Model Bridge Model Pool Model Single Instance Limits   Mutlitenancy on Amazon Redshift  Silo Model Bridge Model Pool Model   Agility  The goal is to find the best intersection of your storage and tenant partitioning needs.</description>
    </item>
    
    <item>
      <title>Overview of Deployment Options on AWS Whitepaper (2020)</title>
      <link>https://majdarbash.github.io/aws-posts/deployment-options-overview-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/deployment-options-overview-whitepaper/</guid>
      <description>AWS CloudFormation AWS Elastic Beanstalk AWS CodeDeploy Amazon Elastic Container Service Amazon Elastic Kubernetes Service AWS OpsWorks Additional Deployment Services Deployment Strategies  Deployment solution capabilities:
 Provision Configure Deploy Scale Monitor  AWS CloudFormation  Provisioning and managing almost any AWS resource Uses YAML / JSON Extensions to CloudFormation  AWS Cloud Development Kit (AWS CDK) - programmatically model AWS infrastructure with TypeScript, Python, Java, or .NET AWS Serverless Application Model (AWS SAM) - open source framework to simplify building serverless applications on AWS   CloudFormation supports package installation on EC2 using AWS::CloudFormation::Init section You may need to use additional deployment service to update the application version running on your infra Monitoring using Stack / Change Set state change, as well as &amp;ldquo;drift detection&amp;rdquo; mechanism.</description>
    </item>
    
    <item>
      <title>Performance at Scale with Amazon ElastiCache</title>
      <link>https://majdarbash.github.io/aws-posts/elasticache-at-scale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/elasticache-at-scale/</guid>
      <description>Memcached vs Redis ElastiCache for Memcached  Caching Design Patterns Consistent Caching (Sharding) Lazy Caching Write On Through Expiration Date The Thundering Herd Cache (Almost) Everything   Elastic Cache for Redis  Distributing Reads and Writes Mutli-AZ with Auto Failover Sharding with Redis Advanced Datasets with Redis   Monitoring and Tuning  Monitoring Cache Efficiency Watching for Hotspots Memory Optimization Redis Backup and Restore Cluster Scaling and Auto Discovery    Overview</description>
    </item>
    
    <item>
      <title>Practicing Continuous Integration and Continuous Delivery on AWS (2017)</title>
      <link>https://majdarbash.github.io/aws-posts/ci-cd-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/ci-cd-whitepaper/</guid>
      <description>What is CI/CD? Benefits of Continuous Delivery Implementing CI/CD Deployment Methods Summary of Best Practices  AWS offerings:
 AWS CodeStar AWS CodeCommit AWS CopePipeline AWS CodeBuild AWS CodeDeploy  What is CI/CD? Continuous Integration
 Developers regularly merge their code to a central repository Refers to the build/integration stage of the software release lifecycle Smaller commits and smaller code changes to integrate Developer commits to repo minimum once a day Goals: find and address bugs faster, improve software quality, reduce the time to validate and relase new changes Automating builds, testing Similar testing environments to production  Continuous Delivery</description>
    </item>
    
    <item>
      <title>Security Anti-Patterns: Mistakes to Avoid (re:Invent 2017)</title>
      <link>https://majdarbash.github.io/aws-posts/aws-security-anipatterns-reinvent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/aws-security-anipatterns-reinvent/</guid>
      <description>Account Structure Anti-Patterns Network Design Anti-Patterns InfoSec Auditing Example: Amazon RDS At-Rest Encryption Audit Software Delivery Anti-Patterns CFN-NAG  Anti-Pattern: A common response to a recurring problem that is usually ineffective and risks being high counterproductive.
Risks associated with Security Anti-Patterns
 Lack of SecOps agility  Slow threat assessments Can&amp;rsquo;t patch fast enough Reactive security posture   Lack of business agility  Slow to onboard new customers Hard to practice true DevOps Rogue dev projects    Types of Security Anti-Patterns</description>
    </item>
    
    <item>
      <title>Security in Amazon Virtual Private Cloud</title>
      <link>https://majdarbash.github.io/aws-posts/security-in-aws-vpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/security-in-aws-vpc/</guid>
      <description>Security: Shared Responsibility Model Data protection in Amazon VPC IAM for Amazon VPC Logging and Monitoring for Amazon VPC Resilience in Amazon VPC Compliance validation for Amazon VPC SG for your VPC NACLs Security Best Practices for your VPC  Security: Shared Responsibility Model  Security of the Cloud - AWS responsibility Security in the Cloud - customer responsibility  Data protection in Amazon VPC  Use MFA for each account Use SSL/TLS to communicate with AWS resources Set up API and user activity logging with AWS CloudTrail Use AWS encryption solutions, along with all default security controls provided by AWS Use advanced managed security services, such as Amazon Macie, which assist in discovering and securing personal data that is stored in Amazon S3  IAM for Amazon VPC  Amazon VPC shares its API namespace with Amazon EC2 Policy actions in Amazon VPC use the ec2: prefix Use authorization based on Resource, Conditions and Tags for granular control  Logging and Monitoring for Amazon VPC  Flow logs  Capture information about the IP traffic going to and from network interfaces in your VPC Data is published to CloudWatch Logs or Amazon S3, and can help you diagnose overly restrictive or overly permissive security group and network ACL rules   Monitoring NAT gateways  Monitor your NAT gateway using CloudWatch Readable, near real-time metrics    Resilience in Amazon VPC  AWS Regions and Availability Zones Low-latency, high-throughput, and highly redundant networking Connectivity Options  Amazon VPC-to-Amazon VPC Connectivity Network-to-Amazon VPC Connectivity    Compliance validation for Amazon VPC  Third party vendors compliance of Amazon VPC: SOC, PCI, FedRAMP, DoD CCSRG, HIPAA BAA, IRAP, MTCS, C5, K-ISMS, ENS-High, OSPAR, and HITRUST-CSF Third-party audit reports are available in AWS Artifact AWS Security Hub - This AWS service provides a comprehensive view of your security state within AWS that helps you check your compliance with open standards and best practices for security  SG for your VPC  Statefull For inbound and outbound rules the source or the destination can be another security group, an IPv4 or IPv6 CIDR block, a single IPv4 or IPv6 address, or a prefix list ID When you specify a security group as the source for a rule, traffic is allowed from the network interfaces that are associated with the source security group for the specified protocol and port In VPC peering connection with another VPC, a security group rule can reference another security group in the peer VPC If the owner of the peer VPC deletes the referenced security group, or if you or the owner of the peer VPC deletes the VPC peering connection, the security group rule is marked as stale You can&amp;rsquo;t use the security groups that you&amp;rsquo;ve created for use with EC2-Classic with instances in your VPC  NACLs  Stateless By default, it allows all inbound and outbound IPv4 traffic and, if applicable, IPv6 traffic Each subnet in your VPC must be associated with a network ACL Rules are evaluated starting with the lowest numbered rule.</description>
    </item>
    
    <item>
      <title>The 5 pillars of AWS Well-Architected Framework</title>
      <link>https://majdarbash.github.io/aws-posts/the-5-pillars-of-aws-well-architected/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/the-5-pillars-of-aws-well-architected/</guid>
      <description>1. Operational Excellence 2. Security 3. Reliability 4. Performance Efficiency 5. Cost Optimization  1. Operational Excellence Ability to support development and run workload effectively, monitor and improve.
 Perform operations as code Make frequent, small, reversible changes Refine operations procedures frequently Anticipate failure Learn from all operational failures  2. Security Ability to protect all assets and improve your security.
 Implement a strong identity foundation Enable traceability Apply security at layers Automate best security practices Protect data in transit and at rest Keep people away from data Prepare for security events  3.</description>
    </item>
    
    <item>
      <title>Web Application Hosting in the AWS Cloud Whitepaper (2019)</title>
      <link>https://majdarbash.github.io/aws-posts/web-application-hosting-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/web-application-hosting-whitepaper/</guid>
      <description>Benefits of using AWS over a traditional hosting model Classic web application architecture on AWS Cloud Key Components of AWS Web Hosting Architecture Key Considerations When Using AWS for Web Hosting  Benefits of using AWS over a traditional hosting model  A cost effective alternative to oversized fleets needed to handle peaks  Traditional hosting: provision servers to handle peak capacity  Unused cycles are wasted outside of peak periods   AWS auto-scaling based on actual traffic trends will result in less wasted capacity and a greater reduction in cost   A scalable solution to handling unexpected traffic peaks  Traditional hosting: inability to respond in time to unexpected traffic spikes   An On-demand solution for test, load, beta and pre-production environments  Traditional hosting: a lot of expensive hardware sits unused for long periods of time    Classic web application architecture on AWS Cloud  Load Balancing with Elastic Load Balancing (ELB) / Application Load Balancing (ALB) Firewalls with Security Groups Caching with Amazon ElastiCache Managed Database with Amazon RDS DNS Services with Amazon Route 53 Edge Caching with Amazon CloudFront Edge Security for Amazon CloudFront with AWS WAF DDoS Protection with AWS Shield Static Storage and Backup with Amazon S3  Key Components of AWS Web Hosting Architecture  Network Management (VPC, Subnets, NACLs, etc&amp;hellip;) Content Delivery (Amazon CloudFront) Managing Public DNS (Route53) Host Security (EC2 Security Groups) Load Balancing Across Clusters (ALB /ELB / Software load-balancing packages, e.</description>
    </item>
    
  </channel>
</rss>
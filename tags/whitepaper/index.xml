<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>whitepaper on My New Hugo Site</title>
    <link>https://majdarbash.github.io/tags/whitepaper/</link>
    <description>Recent content in whitepaper on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://majdarbash.github.io/tags/whitepaper/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Amazon Virtual Private Cloud Connectivity Options Whitepaper (2018)</title>
      <link>https://majdarbash.github.io/aws-posts/aws-vpc-connectivity-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/aws-vpc-connectivity-whitepaper/</guid>
      <description> Network-to-Amazon VPC Connectivity Options  AWS Managed VPN AWS Direct Connect AWS Direct Connect + VPN AWS VPN CloudHub Software VPN Transit VPC   Amazon VPC-to-Amazon VPC Connectivity Options  VPC Peering Software VPN Software-to-AWS Managed VPN AWS Managed VPN AWS Direct Connect AWS Private Link (VPC endpoint)   Internal User-to-Amazon VPC Connectivity Options  Software Remote-Access VPN    Network-to-Amazon VPC Connectivity Options AWS Managed VPN  AWS managed IPSec VPN connection over the internet Advantages  Reuse existing VPN equipment and processes Reuse existing internet connections AWS managed endpoint include multi-data center redundancy and automated failover Supports static routes and BGP peering and routing policies   Limitations  Network latency, variability and availability Customer managed endpoint for implementing redundancy and failover Customer device must support BGP if required     Redundant AWS managed VPN connections   AWS Direct Connect  Dedicated network connection over private lines Advantages  More predictable network performance, reduced bandwidth cost 1 or 10 Gbps provision connections Supports BGP peering and routing policies You can connect to VPCs in different regions using AWS Direct Connect Gateway   Disadvantages  May require additional telecom and hosting provide relationship or new network circuits to be provisioned     AWS Direct Connect Gateway   AWS Direct Connect + VPN  IPSec VPN connection over private lines Advantages  AWS Direct Connect features with the addition of secure IPSec VPN connection   Disadvantages  Additional VPN complexity added on top of AWS Direct Connect    AWS VPN CloudHub  Connect remote branch offices in hub-and-spoke model for primary or backup connectivity AWS VPN CloudHub leverages an Amazon VPC virtual private gateway with multiple gateways, each using unique BGP autonomous system numbers (ASNs) Advantages  Reuse existing internet connections and AWS VPN connections AWS managed virtual private gateway include multi-data center redundancy and automated failover Support BGP for exchanging routes and routing policies   Disadvantages  Network latency,variability and availability are dependent on the internet User managed branch office endpoints are responsible for implementing redundancy and failover     Software VPN  Software application-based VPN connection over the internet Advantages  Supports a wider array of VPN vendors, products, and protocols Fully customer-managed solution   Disadvantages  Customer is responsible for implementing HA solutions for all VPN endpoints     Software VPN   Transit VPC  Software appliance-based VPN connection with hub VPC Common strategy for connecting multiple, geographically disperse VPCs and remote networks in order to create a global network transit center AWS managed IPSec VPN connection for spoke VPC connection Advantages  Supports a wider array of VPN vendors, products, and protocols Fully customer-managed solution AWS managed VPN connection between hub and spoke VPCs   Disadvantages  Customer is responsible for implementing HA solutions for all VPN endpoints     Software VPN and Transit VPC   Amazon VPC-to-Amazon VPC Connectivity Options VPC Peering  AWS-provided network connectivity between two VPCs Advantages  Leverages AWS network infrastructure No single point of failure No bandwidth bottleneck   Disadvantages  VPC peering does nto support transitive peering relationships     VPC Peering   Software VPN  Software appliance-based VPN connections between VPCs Advantages  Leverages AWS networking equipment in-region adn internet pipes between regions Supports a wider array of VPN vendors, products and protocols Managed entirely by you   Disadvantages  You are responsible for implementing HA solutions for all VPN endpoints (if required) VPN instances could become a network bottleneck    Software-to-AWS Managed VPN  Software appliance to VPN connection between VPCs Advantages  Leverages AWS networking in-region and internet pipes between regions AWS managed endpoint includes multi-data center redundancy and automated failover   Disadvantages  You are responsible for implementing HA solutions for the software appliance VPN endpoints (if required) VPN instances could become a network bottleneck     Software to AWS Managed VPN   AWS Managed VPN  VPC-to-VPC routing managed by you over IPSec VPN connections using your equipment and the internet Advantages  Reuse existing Amazon VPC VPN connections AWS managed endpoint include multi-data center redundancy and automatic failover Supports static routes and dynamic BGP peering and routing policies   Disadvantages  Network latency, variability and availability depends on internet conditions The endpoint you manage is responsible for implementing redundancy and failover (if required)     VPC to VPC through AWS Managed VPN   AWS Direct Connect  VPC-to-VPC routing managed by you using your equipment in an AWS Direct Connect location and private lines Advantages  Consistent network performance Reduced bandwidth costs Supports static routes and BGP peering and routing policies   Disadvantages  May require additional telecom and hosting provide relationships     VPC to VPC through AWS Direct Connect   AWS Private Link (VPC endpoint)  AWS-provided network connectivity between two VPCs using interface endpoints Advantages  Leverages AWS networking infrastructure No single point of failure   Disadvantages  VPC endpoint services only available in AWS region in which they are created     AWS Private Link   Internal User-to-Amazon VPC Connectivity Options  Virtual extension of your data center into AWS Leverages existing end-user internal and remove access policies and technologies Requires existing end-user internal and remove access implementations  Software Remote-Access VPN  Cloud-based remote access solution to Amazon VPC and/or internal networks Advantages  Leverages low-cost, elastic, and secure web services provided by AWS for implementing a remote access solution   Disadvantages  Could be redundancy if internal and remote access implementations already exist     Remote Access VPN Solutions   </description>
    </item>
    
    <item>
      <title>An Overview of the AWS Cloud Adoption Framework (2017)</title>
      <link>https://majdarbash.github.io/aws-posts/overview-caf-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/overview-caf-whitepaper/</guid>
      <description>Six Perspective of AWS CAF Mapping the Journey to the Cloud AWS CAF Perspectives: Additional Detail  Business Perspective: Value Realization People Perspective: Roles and Readiness Governance Perspective: Prioritization and Control Platform Perspective: Applications and Infrastructure Security Perspective: Risk and Compliance Operations Perspective: Manage and Scale    Six Perspective of AWS CAF The perspective below describe the common roles and objectives to update staff skills and organizational processes.</description>
    </item>
    
    <item>
      <title>Automatic Elasticity Whitepaper (2018)</title>
      <link>https://majdarbash.github.io/aws-posts/automating-elasticity-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/automating-elasticity-whitepaper/</guid>
      <description>Types of Elasticity** Monitoring AWS Service Usage and Costs** Tagging Resources Automating Elasticity  Automating Time-Based Elasticity Automatic Volume-Based Elasticity    Types of Elasticity**  Time-based elasticity  Turning off resources when they are not being used   Volume-based elasticity  Matching scale to the intensity of demand, whether that&amp;rsquo;s compute cores, storage sizes, or throughput    Monitoring AWS Service Usage and Costs**  Cost Optimization Monitor  Detailed billing reports Break down by period, account, resource, or custom resource tags   Cost Explorer  View data up to the last 13 months Get recommendations on what Reserved Instances to purchase See trends that can help you understand your costs    Tagging Resources  Tagging resources helps get better visibility and control over cloud IT costs down  Automating Elasticity Automating Time-Based Elasticity  AWS Instance Scheduler  Start and stop schedules for your EC2 instances Deployed using an AWS CloudFormation template Specify the required parameter during the deployment Recurring AWS Lambda function will automatically start and stop appropriately tagged EC2 instances   Amazon EC2 API tools  Instances can be terminated programmatically using EC2 APIs Use StopInstances and TerminateInstances   AWS Lambda  Serverless functions can be used to shutdown instances that are not being used Trigger Lambda by Amazon CloudWatch Events   AWS Data Pipeline  Run AWS CLI commands on a set schedule   Amazon CloudWatch  Collect and track metrics and log files, set alarms and automatically react to changes in your AWS resources    Automatic Volume-Based Elasticity Auto-Scaling can be used for::</description>
    </item>
    
    <item>
      <title>AWS Best Practices for DDoS Resiliency (2019)</title>
      <link>https://majdarbash.github.io/aws-posts/best-practices-ddos-resiliency-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/best-practices-ddos-resiliency-whitepaper/</guid>
      <description>Denial of Service Attacks Infrastructure Layer Attacks Mitigation Techniques Monitoring Support  Protecting the business from the impact of Distributed Denial of Service attacks (DDoS):
 Maintaining availability and responsiveness of your application Avoid unnecessary cost of scaling infrastructure in response to an attack  Denial of Service Attacks DDoS attacks:
 Uses multiple sources, distributed groups of malware infected devices to orchestrate an attack against a target Hosts generate a flood of packets or requests to overwhelm the target DDoS are most common at layers 3,4,6 and 7 of the OSI model  Examples of attacks:</description>
    </item>
    
    <item>
      <title>AWS Cloud Transformation Maturity Model Whitepaper (2017)</title>
      <link>https://majdarbash.github.io/aws-posts/cloud-transformation-maturity-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/cloud-transformation-maturity-model/</guid>
      <description>Project Stage Foundation Stage Migration Stage Optimization Stage  AWS Cloud Transformation Maturity Model (CTMM):
 Tool used by enterprise customers to assess the maturity of their cloud adoption Realizing the vision of IT-as-a-Service (ITaaS) Whole organization has to transform and adopt the cloud   Project Stage Challenges and Barriers
 Limited knowledge and training  Raise level of AWS awareness via education and training   Executive support and funding  Seek case studies of proven ROI, participate in AWS executive briefings   Purchasing public cloud services  Educate procurement and legal staff about new purchasing paradigms Consider purchasing options  Direct purchase from AWS Indirect purchase from an AWS Partner     Limited confidence in cloud service models  Execute one or more pilot/POC projects Explore accelerator services, such as AWS Migration Jumpstart AWS POC is another venue to get funding for POC projects executed via eligible AWS Partners, check Partner Funding webpage   IT ownership and direction  Conduct a Kickoff and Discovery Workshop    Educational resources for roles in your organization</description>
    </item>
    
    <item>
      <title>Backup and Recovery Approaches using AWS Whitepaper (2016)</title>
      <link>https://majdarbash.github.io/aws-posts/backup-and-recovery-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/backup-and-recovery-whitepaper/</guid>
      <description>AWS Storage Services for Data Protection Designing a Backup and Recovery Solution Cloud-Native Infrastructure On-Premises to AWS Infrastructure Hybrid Environments Securing Backup Data in AWS  AWS Storage Services for Data Protection  Amazon S3  Single object limit of 5 TB Range of storage classes: standard, standard IA, glacier   Amazon Glacier  Extremely low-cost, cloud archive service Secure and durable storage for archiving and online backup Infrequently accessed data, retrieval times of several hours   AWS Storage Gateway  Connects on-premises software appliance with cloud-based storage   AWS Transfer Services  AWS Direct Connect, AWS Snowball, AWS Storage Gateway, Amazon S3 Transfer Acceleration to quickly transfer your data    Designing a Backup and Recovery Solution  Backup process should meet the RTO and RPO of the business, including:  File-level recovery Volume-level recovery Application-level recovery (e.</description>
    </item>
    
    <item>
      <title>Getting Started with Amazon Aurora Whitepaper (2016)</title>
      <link>https://majdarbash.github.io/aws-posts/getting-started-with-amazon-aurora-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/getting-started-with-amazon-aurora-whitepaper/</guid>
      <description>Amazon Aurora Amazon Aurora Architecture Monitoring Migrating to Amazon Aurora  Amazon Aurora  Fully managed, cloud-native database service Scalability, reliability, performance Cost-effective Highly durable  Database volumes are divided into 10GB segments Each segment is replicated six ways across 3 AZs   Fault-tolerant  Transparently handles loss of 2 out of 6 copies without losing write availability or three out of six copies without losing read availability   Self-healing  Automatically replaces or repairs failed disks and nodes   Storage autoscaling  Volume grows in increments of 10GB up to a maximum of 64TB   Continuous backup  No impact on performance, 99.</description>
    </item>
    
    <item>
      <title>Implementing Microservices on AWS (2019)</title>
      <link>https://majdarbash.github.io/aws-posts/microservices-on-aws-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/microservices-on-aws-whitepaper/</guid>
      <description>Simple Microservices Architecture on AWS Reducing Operational Complexity Distributed Systems Components  Service Discovery Distributed Data Management Asynchronous Communication and Lightweight Messaging Distributed Monitoring    Microservices are a combination of various successful and proven concepts such as:
 Agile software development Service-oriented architectures API-first design Continuous Integration/Continuous Delivery (CI/CD)  Serverless operational model tenets:
 No infrastructure to provision or manage Automatically scaling by unit of consumption &amp;ldquo;Pay for value&amp;rdquo; billing model Built-in availability and fault tolerance  Simple Microservices Architecture on AWS User Interface</description>
    </item>
    
    <item>
      <title>Infrastructure as Code Whitepaper (2017)</title>
      <link>https://majdarbash.github.io/aws-posts/infrastructure-as-a-code-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/infrastructure-as-a-code-whitepaper/</guid>
      <description>Infrastructure Resource Lifecycle Resource Provisioning Configuration Management  Amazon EC2 Systems Manager AWS OpsWorks for Chef Automate   Monitoring and Performance Governance and Compliance Resource Optimization Key Actions to Implement IaaC  Infrastructure Resource Lifecycle IaaC Features:
 Both administrator and developers can instantiate infrastructure using configuration files Code can be used to produce compute, storage, network and application services Eliminates configuration drift through automation Increases the speed and agility of infrastructure deployments  Lifecycle:</description>
    </item>
    
    <item>
      <title>Integrating AWS with Multiprotocol Label Switching Whitepaper (2016)</title>
      <link>https://majdarbash.github.io/aws-posts/mutlprotocol-label-switching-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/mutlprotocol-label-switching-whitepaper/</guid>
      <description>MPLS and Managed MPLS Services AWS Networking Services and Core Technologies BGP Protocol Overview AWS APN Partners - Direct Connect as a Service Colocation with AWS Direct Connect  MPLS and Managed MPLS Services MLPS:
 MPLS predetermines the routing path and uses a label swapping push, pop, and swap method to direct the traffic to its destination CAn be provisioned as Layer 3 (IP-based) or Layer 2 (single broadcast domain) Provides a logical extension of a customer’s network  Business reasons for integration MPLS into your existing infrastructure:</description>
    </item>
    
    <item>
      <title>Introduction to AWS Economics (2015)</title>
      <link>https://majdarbash.github.io/aws-posts/introduction-to-aws-economics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/introduction-to-aws-economics/</guid>
      <description>Reducing Costs and Complexity  Advantages of Cloud Technology AWS Economics    Reducing Costs and Complexity Investments Considered:
 Capital expenditures Operational expenditures Staffing Opportunity costs Licensing Facilities overhead  Expansion of Data Center or colocation footprint:
 Capacity planning  Servers, hardware maintenance, pricing   Utilization  Average utilization rate Provisioning for peak load   Operations  Facilities, international expansion, utilities (electricity, cooling), and budgetting for peak time   Optimization  Automatic scaling, capacity reservation, quick infrastructure expansion costs    Advantages of Cloud Technology  Decrease your TCO Reduce complexity Adjust capacity on the fly Reduce time to market Deploy quickly, event worldwide Increase efficiencies Innovate more Spend your resource strategically Enhanced security  AWS Economics Benefits to the AWS users:</description>
    </item>
    
    <item>
      <title>Maximizing Value with AWS Whitepaper (2017)</title>
      <link>https://majdarbash.github.io/aws-posts/maximizing-value-with-aws-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/maximizing-value-with-aws-whitepaper/</guid>
      <description>Achieve Total Cost of Operation Benefits Using Cloud Computing  Create a Culture of Cost Management Driving Cost of Operation Employ Best Practices    Achieve Total Cost of Operation Benefits Using Cloud Computing Create a Culture of Cost Management  Use tools like AWS Trusted Advisor and AWS Billing Explorer  Put data in the hands of everyone  Reduces feedback loop between information/data and the action to correct usage and sizing issues   Enact policies and evangelize  Best practices to drive operational excellence   Spend time training  Educate staff on the items affecting the cost and steps to eliminate waste   Create incentives for good behavior  Encourage cost effectiveness throughout the organization      Driving Cost of Operation Funding Models</description>
    </item>
    
    <item>
      <title>Migrating Applications Running Relational Databases to AWS: Best Practices Guide (2019)</title>
      <link>https://majdarbash.github.io/aws-posts/migrating-applications-to-aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/migrating-applications-to-aws/</guid>
      <description>Migration Steps and Tools  Development Environment Setup Prerequisites Step 1: Migration Assessment Step 2: Schema Conversion Step 3: Conversion of Embedded SQL and Application Code Step 4: Data Migration Step 5: Testing Converted Code Step 6: Data Replication Step 7: Deployment to AWS and Go Live   Best Practices  Migration Steps and Tools  Migration assessment analysis Schema conversion to target database platform SQL statement and application code conversion Data migration Testing of converted database and application code Setting up replication and failover scenarios for data migration to the target platform Setting up monitoring for a new production environment and go live with the target environment  Tools to automate migration steps:</description>
    </item>
    
    <item>
      <title>Overview of Deployment Options on AWS Whitepaper (2020)</title>
      <link>https://majdarbash.github.io/aws-posts/deployment-options-overview-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/deployment-options-overview-whitepaper/</guid>
      <description>AWS CloudFormation AWS Elastic Beanstalk AWS CodeDeploy Amazon Elastic Container Service Amazon Elastic Kubernetes Service AWS OpsWorks Additional Deployment Services Deployment Strategies  Deployment solution capabilities:
 Provision Configure Deploy Scale Monitor  AWS CloudFormation  Provisioning and managing almost any AWS resource Uses YAML / JSON Extensions to CloudFormation  AWS Cloud Development Kit (AWS CDK) - programmatically model AWS infrastructure with TypeScript, Python, Java, or .NET AWS Serverless Application Model (AWS SAM) - open source framework to simplify building serverless applications on AWS   CloudFormation supports package installation on EC2 using AWS::CloudFormation::Init section You may need to use additional deployment service to update the application version running on your infra Monitoring using Stack / Change Set state change, as well as &amp;ldquo;drift detection&amp;rdquo; mechanism.</description>
    </item>
    
    <item>
      <title>Practicing Continuous Integration and Continuous Delivery on AWS (2017)</title>
      <link>https://majdarbash.github.io/aws-posts/ci-cd-whitepaper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://majdarbash.github.io/aws-posts/ci-cd-whitepaper/</guid>
      <description>What is CI/CD? Benefits of Continuous Delivery Implementing CI/CD Deployment Methods Summary of Best Practices  AWS offerings:
 AWS CodeStar AWS CodeCommit AWS CopePipeline AWS CodeBuild AWS CodeDeploy  What is CI/CD? Continuous Integration
 Developers regularly merge their code to a central repository Refers to the build/integration stage of the software release lifecycle Smaller commits and smaller code changes to integrate Developer commits to repo minimum once a day Goals: find and address bugs faster, improve software quality, reduce the time to validate and relase new changes Automating builds, testing Similar testing environments to production  Continuous Delivery</description>
    </item>
    
  </channel>
</rss>